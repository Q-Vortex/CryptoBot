import pandas as pd
import numpy as np
from binance.client import Client
import ta
from datetime import datetime, timedelta
import time

class MicroLiquidityHunter:
    def __init__(self, initial_balance=20, api_key=None, api_secret=None):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Binance (–º–æ–∂–Ω–æ –±–µ–∑ –∫–ª—é—á–µ–π –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        if api_key and api_secret:
            self.client = Client(api_key, api_secret)
        else:
            self.client = Client()
            
        self.initial_balance = initial_balance
        self.balance = initial_balance
        self.trades = []
        self.consecutive_losses = 0
        self.portfolio = {}
        
    def get_real_market_data(self, symbol, timeframe='1m', lookback=500):
        """–ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Å Binance"""
        try:
            klines = self.client.get_klines(
                symbol=symbol, 
                interval=timeframe, 
                limit=lookback
            )
            
            df = pd.DataFrame(klines, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'trades', 'taker_buy', 'taker_sell', 'ignore'
            ])
            
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = df[col].astype(float)
                
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            
            return df
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None
    
    def get_current_price(self, symbol):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞"""
        try:
            ticker = self.client.get_symbol_ticker(symbol=symbol)
            return float(ticker['price'])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return None
    
    def wait_for_price_movement(self, symbol, entry_price, stop_loss, take_profit, signal, max_wait_minutes=60):
        """–û–∂–∏–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏–ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
        print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã... (–º–∞–∫—Å. {max_wait_minutes} –º–∏–Ω—É—Ç)")
        
        start_time = datetime.now()
        end_time = start_time + timedelta(minutes=max_wait_minutes)
        
        while datetime.now() < end_time:
            try:
                current_price = self.get_current_price(symbol)
                
                if current_price is None:
                    time.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    continue
                
                # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ PnL
                if signal == 'BUY':
                    current_pnl_percent = (current_price - entry_price) / entry_price * 100
                else:
                    current_pnl_percent = (entry_price - current_price) / entry_price * 100
                
                # üî• –î–û–ë–ê–í–õ–Ø–ï–ú PnL-–°–¢–û–ü–´ üî•
                
                # üö® –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –£–ë–´–¢–û–ö -5%
                if current_pnl_percent <= -5:
                    print(f"   üö® –°–¢–û–ü –ü–û –£–ë–´–¢–ö–£! PnL: {current_pnl_percent:.2f}%")
                    return current_price, 'PNL_STOP'
                
                # üéØ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –ü–†–ò–ë–´–õ–¨ +1% (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å)
                target_pnl_percent = (take_profit / entry_price - 1) * 100 if signal == 'BUY' else (entry_price / take_profit - 1) * 100
                if current_pnl_percent >= 1 and current_pnl_percent < target_pnl_percent:
                    print(f"   üéØ –†–ê–ù–ù–ò–ô –¢–ï–ô–ö! PnL: {current_pnl_percent:.2f}%")
                    return current_price, 'EARLY_TP'
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞
                if signal == 'BUY':
                    if current_price >= take_profit:
                        print(f"   ‚úÖ –¢–ï–ô–ö-–ü–†–û–§–ò–¢ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –¶–µ–Ω–∞: {current_price:.4f}")
                        return current_price, 'TP'
                    elif current_price <= stop_loss:
                        print(f"   ‚ùå –°–¢–û–ü-–õ–û–°–° –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –¶–µ–Ω–∞: {current_price:.4f}")
                        return current_price, 'SL'
                else:  # SELL
                    if current_price <= take_profit:
                        print(f"   ‚úÖ –¢–ï–ô–ö-–ü–†–û–§–ò–¢ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –¶–µ–Ω–∞: {current_price:.4f}")
                        return current_price, 'TP'
                    elif current_price >= stop_loss:
                        print(f"   ‚ùå –°–¢–û–ü-–õ–û–°–° –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –¶–µ–Ω–∞: {current_price:.4f}")
                        return current_price, 'SL'
                
                # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–æ–∫–∏
                print(f"   üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.4f} | PnL: {current_pnl_percent:+.2f}%", end='\r')
                
                time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
                time.sleep(10)
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ, –≤—ã—Ö–æ–¥–∏–º –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
        final_price = self.get_current_price(symbol)
        if final_price is None:
            final_price = entry_price  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ö–æ–¥–Ω—É—é
        
        print(f"   ‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –í—ã—Ö–æ–¥ –ø–æ —Ü–µ–Ω–µ: {final_price:.4f}")
        return final_price, 'TIME'
    
    def calculate_max_trade_size(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞"""
        if self.initial_balance <= 20:
            max_trade = self.balance * 0.4  # 40% –¥–ª—è –º–∏–∫—Ä–æ-–¥–µ–ø–æ–∑–∏—Ç–∞
        elif self.initial_balance <= 50:
            max_trade = self.balance * 0.35  # 35% –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
        else:
            max_trade = self.balance * 0.25  # 25% –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
        
        return max_trade
    
    def get_affordable_symbols(self, symbols):
        """–§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏"""
        affordable_symbols = []
        max_trade_size = self.calculate_max_trade_size()
        
        print(f"   üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: ${max_trade_size:.2f}")
        
        for symbol in symbols:
            try:
                current_price = self.get_current_price(symbol)
                if current_price is None:
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–µ–º –ø–æ–∑–≤–æ–ª–∏—Ç—å
                if current_price <= max_trade_size:
                    affordable_symbols.append(symbol)
                    print(f"   ‚úÖ {symbol}: ${current_price:.4f}")
                else:
                    print(f"   ‚ùå {symbol}: ${current_price:.4f} (–Ω—É–∂–Ω–æ ${max_trade_size:.2f}+)")
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è  {symbol}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã")
                
        return affordable_symbols
    
    def calculate_micro_trade_size(self, opportunity):
        """–†–ê–°–ß–ï–¢ –†–ê–ó–ú–ï–†–ê –î–õ–Ø –ú–ê–õ–ï–ù–¨–ö–û–ì–û –î–ï–ü–û–ó–ò–¢–ê"""
        # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
        if self.initial_balance <= 20:
            base_size = 5  # $5 –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ $20
        elif self.initial_balance <= 50:
            base_size = 10  # $10 –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ $50
        else:
            base_size = 20  # $20 –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ $100+
        
        # –ú–ê–†–¢–ò–ù–ì–ï–ô–õ –¥–ª—è –º–∏–∫—Ä–æ-–¥–µ–ø–æ–∑–∏—Ç–∞ (–º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)
        if self.consecutive_losses > 0:
            martingale_multiplier = 1.5 ** min(self.consecutive_losses, 2)  # 1, 1.5, 2.25
            trade_size = base_size * martingale_multiplier
        else:
            trade_size = base_size
            
        # –£–ú–ù–û–ñ–ê–ï–ú –Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
        confidence_factor = opportunity['confidence'] / 50  # 0.8-1.6
        trade_size = trade_size * confidence_factor
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        max_trade = self.calculate_max_trade_size()
        trade_size = min(trade_size, max_trade)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä $2 –¥–ª—è –º–∏–∫—Ä–æ-—Ç–æ—Ä–≥–æ–≤–ª–∏
        trade_size = max(trade_size, 2)
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        trade_size = round(trade_size, 2)
        
        return trade_size
    
    def execute_real_trade(self, opportunity):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ô –¥–µ–º–æ-—Å–¥–µ–ª–∫–∏ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω"""
        if opportunity['signal'] == 'HOLD':
            return None
            
        # –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –†–ê–ó–ú–ï–† –¥–ª—è –º–∏–∫—Ä–æ-–¥–µ–ø–æ–∑–∏—Ç–∞
        trade_size = self.calculate_micro_trade_size(opportunity)
        
        # –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ê–¢–û–ß–ù–û–°–¢–ò –°–†–ï–î–°–¢–í
        if trade_size > self.balance:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –Ω—É–∂–Ω–æ ${trade_size:.2f}, –µ—Å—Ç—å ${self.balance:.2f}")
            return None
        
        entry_price = opportunity['entry']
        stop_loss = opportunity['stop_loss']
        take_profit = opportunity['take_profit']
        
        # –†–ï–ê–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –ö–û–õ–ò–ß–ï–°–¢–í–ê
        quantity = trade_size / entry_price
        
        print(f"üîπ –ú–ò–ö–†–û-–°–î–ï–õ–ö–ê: {opportunity['symbol']} {opportunity['signal']}")
        print(f"   üí∞ –†–∞–∑–º–µ—Ä: ${trade_size:.2f} | –í—Ö–æ–¥: {entry_price:.4f}")
        print(f"   üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss:.4f} | üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {take_profit:.4f}")
        print(f"   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f}")
        
        # –û–ñ–ò–î–ê–ï–ú –†–ï–ê–õ–¨–ù–û–ì–û –î–í–ò–ñ–ï–ù–ò–Ø –¶–ï–ù–´
        exit_price, exit_reason = self.wait_for_price_movement(
            opportunity['symbol'], entry_price, stop_loss, take_profit, opportunity['signal']
        )
        
        # –†–∞—Å—á–µ—Ç PnL
        if opportunity['signal'] == 'BUY':
            pnl_percent = (exit_price - entry_price) / entry_price * 100
        else:
            pnl_percent = (entry_price - exit_price) / entry_price * 100
        
        pnl_usd = (trade_size * pnl_percent) / 100
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
        if pnl_usd < 0:
            self.consecutive_losses += 1
        else:
            self.consecutive_losses = 0
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú –î–ï–ú–û-–ë–ê–õ–ê–ù–°
        old_balance = self.balance
        self.balance += pnl_usd
        
        trade_result = {
            'symbol': opportunity['symbol'],
            'signal': opportunity['signal'],
            'entry_price': entry_price,
            'exit_price': exit_price,
            'trade_size': trade_size,
            'quantity': quantity,
            'pnl_percent': pnl_percent,
            'pnl_usd': pnl_usd,
            'timestamp': datetime.now(),
            'result': exit_reason,
            'balance_before': old_balance,
            'balance_after': self.balance
        }
        
        self.trades.append(trade_result)
        
        return trade_result

    # –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –û–°–¢–ê–Æ–¢–°–Ø –ü–†–ï–ñ–ù–ò–ú–ò
    def detect_liquidity_clusters(self, symbol, timeframe='1m', lookback=500):
        df = self.get_real_market_data(symbol, timeframe, lookback)
        if df is None:
            return {'supports': [], 'resistances': [], 'current_price': 0}
        
        df['price_range'] = (df['high'] + df['low']) / 2
        volume_profile = df.groupby('price_range')['volume'].sum()
        
        if len(volume_profile) == 0:
            return {'supports': [], 'resistances': [], 'current_price': float(df['close'].iloc[-1])}
        
        poc_level = volume_profile.idxmax()
        
        from sklearn.cluster import KMeans
        prices = df[['high', 'low']].values.flatten()
        prices = prices.reshape(-1, 1)
        
        kmeans = KMeans(n_clusters=8, random_state=42)
        kmeans.fit(prices)
        
        clusters = kmeans.cluster_centers_.flatten()
        clusters = np.sort(clusters)
        
        current_price = float(df['close'].iloc[-1])
        
        supports = [c for c in clusters if c < current_price]
        resistances = [c for c in clusters if c > current_price]
        
        supports = sorted(supports, reverse=True)[:3]
        resistances = sorted(resistances)[:3]
        
        return {
            'supports': supports,
            'resistances': resistances,
            'poc': poc_level,
            'current_price': current_price
        }
    
    def analyze_market_structure(self, symbol):
        df = self.get_real_market_data(symbol, '1h', 100)
        if df is None:
            return {'trend': 'BULLISH', 'recent_high': 0, 'recent_low': 0, 'sma_20': 0, 'sma_50': 0}
        
        df['sma_20'] = ta.trend.sma_indicator(df['close'], window=20)
        df['sma_50'] = ta.trend.sma_indicator(df['close'], window=50)
        
        current_sma_20 = df['sma_20'].iloc[-1]
        current_sma_50 = df['sma_50'].iloc[-1]
        
        trend = "BULLISH" if current_sma_20 > current_sma_50 else "BEARISH"
        
        recent_high = df['high'].tail(20).max()
        recent_low = df['low'].tail(20).min()
        
        return {
            'trend': trend,
            'recent_high': recent_high,
            'recent_low': recent_low,
            'sma_20': current_sma_20,
            'sma_50': current_sma_50
        }
    
    def calculate_aggressive_targets(self, symbol, current_price, signal, confidence):
        volatility_map = {
            'BTCUSDT': 0.025, 'ETHUSDT': 0.030, 'BNBUSDT': 0.035, 
            'ADAUSDT': 0.045, 'DOTUSDT': 0.040, 'LINKUSDT': 0.042,
            'LTCUSDT': 0.038, 'BCHUSDT': 0.043, 'XRPUSDT': 0.047, 
            'EOSUSDT': 0.050,
        }
        
        base_volatility = volatility_map.get(symbol, 0.035)
        confidence_boost = (confidence / 100) * 0.5
        volatility = base_volatility * (1 + confidence_boost)
        
        if signal == 'BUY':
            take_profit = current_price * (1 + volatility)
            stop_loss = current_price * (1 - volatility * 0.6)
        else:
            take_profit = current_price * (1 - volatility) 
            stop_loss = current_price * (1 + volatility * 0.6)
        
        return take_profit, stop_loss
    
    def find_trading_opportunity(self, symbol):
        try:
            liquidity = self.detect_liquidity_clusters(symbol)
            market_structure = self.analyze_market_structure(symbol)
            
            current_price = liquidity['current_price']
            nearest_support = liquidity['supports'][0] if liquidity['supports'] else None
            nearest_resistance = liquidity['resistances'][0] if liquidity['resistances'] else None
            
            support_distance = ((current_price - nearest_support) / current_price * 100) if nearest_support else None
            resistance_distance = ((nearest_resistance - current_price) / current_price * 100) if nearest_resistance else None
            
            opportunity = {
                'symbol': symbol, 'current_price': current_price, 'trend': market_structure['trend'],
                'signal': 'HOLD', 'entry': None, 'stop_loss': None, 'take_profit': None, 'confidence': 0
            }
            
            if (nearest_support and support_distance <= 0.5 and market_structure['trend'] == 'BULLISH'):
                confidence = min(80, 100 - (support_distance * 100))
                take_profit, stop_loss = self.calculate_aggressive_targets(symbol, current_price, 'BUY', confidence)
                opportunity.update({
                    'signal': 'BUY', 'entry': current_price, 'stop_loss': stop_loss,
                    'take_profit': take_profit, 'confidence': confidence
                })
            elif (nearest_resistance and resistance_distance <= 0.5 and market_structure['trend'] == 'BEARISH'):
                confidence = min(80, 100 - (resistance_distance * 100))
                take_profit, stop_loss = self.calculate_aggressive_targets(symbol, current_price, 'SELL', confidence)
                opportunity.update({
                    'signal': 'SELL', 'entry': current_price, 'stop_loss': stop_loss,
                    'take_profit': take_profit, 'confidence': confidence
                })
            
            return opportunity
            
        except Exception as e:
            return None
    
    def scan_and_trade(self, symbols, max_cycles=10):
        """–°–∫–∞–Ω–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫ –¥–ª—è –ú–ò–ö–†–û-–î–ï–ü–û–ó–ò–¢–ê —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –ú–ò–ö–†–û-—Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —Å –†–ï–ê–õ–¨–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏")
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å: ${self.initial_balance:.2f}")
        print(f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤: {max_cycles}")
        print("‚ö° –°–¢–†–ê–¢–ï–ì–ò–Ø: –ê–î–ê–ü–¢–ò–í–ù–´–ô –†–ê–ó–ú–ï–† + –ú–ò–ö–†–û-–ú–ê–†–¢–ò–ù–ì–ï–ô–õ + PnL-–°–¢–û–ü–´")
        print("üìä –†–ï–ñ–ò–ú: –ú–ò–ö–†–û-–î–ï–ú–û-–°–ß–ï–¢ —Å –†–ï–ê–õ–¨–ù–´–ú–ò –¶–ï–ù–ê–ú–ò")
        print("-" * 70)
        
        # –§–ò–õ–¨–¢–†–£–ï–ú –ü–ê–†–´ –ü–û –î–û–°–¢–£–ü–ù–û–°–¢–ò –ù–ê –û–°–ù–û–í–ï –ë–ê–õ–ê–ù–°–ê
        print(f"\nüîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞ ${self.initial_balance:.2f}:")
        affordable_symbols = self.get_affordable_symbols(symbols)
        
        if not affordable_symbols:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!")
            return
            
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞—Ä: {len(affordable_symbols)}")
        
        for cycle in range(max_cycles):
            print(f"\nüîÑ –¶–∏–∫–ª {cycle + 1}/{max_cycles}")
            print(f"üïí {datetime.now().strftime('%H:%M:%S')} - –ü–æ–∏—Å–∫ —Å–¥–µ–ª–æ–∫...")
            print(f"üìä –ü–æ–¥—Ä—è–¥ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π: {self.consecutive_losses}")
            print(f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${self.balance:.2f}")
            
            opportunities = []
            for symbol in affordable_symbols:  # –¢–æ—Ä–≥—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã
                try:
                    opportunity = self.find_trading_opportunity(symbol)
                    if opportunity and opportunity['signal'] != 'HOLD':
                        opportunities.append(opportunity)
                    time.sleep(0.05)
                except Exception as e:
                    continue
            
            if opportunities:
                opportunities.sort(key=lambda x: x['confidence'], reverse=True)
                
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(opportunities)} —Å–¥–µ–ª–æ–∫:")
                total_cycle_pnl = 0
                
                for opp in opportunities:
                    trade_result = self.execute_real_trade(opp)
                    if trade_result:
                        status = self.get_result_display(trade_result['result'])
                        pnl_display = f"{trade_result['pnl_usd']:+.2f}$ ({trade_result['pnl_percent']:+.2f}%)"
                        size_display = f"–†–∞–∑–º–µ—Ä: ${trade_result['trade_size']:.2f}"
                        print(f"   {opp['symbol']} {opp['signal']} | {pnl_display} | {size_display} | {status}")
                        total_cycle_pnl += trade_result['pnl_usd']
            else:
                print("üì≠ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            print(f"üí∞ –°–¥–µ–ª–æ–∫ –≤ —Ü–∏–∫–ª–µ: {len(opportunities)} | –û–±—â–∏–π PnL —Ü–∏–∫–ª–∞: ${total_cycle_pnl:+.2f}")
            print(f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${self.balance:.2f}")
            
            if cycle < max_cycles - 1:
                print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥...")
                time.sleep(30)
    
    def get_result_display(self, result_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        display_map = {
            'TP': '‚úÖ TP',
            'SL': '‚ùå SL',
            'TIME': '‚è∞ TIME', 
            'PNL_STOP': 'üö® PNL_STOP',
            'EARLY_TP': 'üéØ EARLY_TP'
        }
        return display_map.get(result_type, result_type)
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ú–ò–ö–†–û-—Å—á–µ—Ç–∞"""
        if not self.trades:
            print("\nüìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        df = pd.DataFrame(self.trades)
        
        total_trades = len(df)
        winning_trades = len(df[df['result'] == 'TP']) + len(df[df['result'] == 'EARLY_TP'])
        losing_trades = len(df[df['result'] == 'SL']) + len(df[df['result'] == 'PNL_STOP'])
        time_out_trades = len(df[df['result'] == 'TIME'])
        
        win_rate = (winning_trades / total_trades) * 100 if total_trades > 0 else 0
        
        total_pnl_usd = df['pnl_usd'].sum()
        total_pnl_percent = (total_pnl_usd / self.initial_balance) * 100
        
        avg_win = df[df['pnl_usd'] > 0]['pnl_usd'].mean() if winning_trades > 0 else 0
        avg_loss = df[df['pnl_usd'] < 0]['pnl_usd'].mean() if losing_trades > 0 else 0
        
        avg_trade_size = df['trade_size'].mean() if 'trade_size' in df.columns else 0
        
        print("\n" + "="*70)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ - –ú–ò–ö–†–û-–î–ï–ú–û-–°–ß–ï–¢ —Å PnL-–°–¢–û–ü–ê–ú–ò")
        print("="*70)
        print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"–í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {winning_trades} ({win_rate:.1f}%)")
        print(f"–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: {losing_trades}")
        print(f"–ü–æ –≤—Ä–µ–º–µ–Ω–∏: {time_out_trades}")
        print(f"–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: ${avg_trade_size:.2f}")
        print(f"–°—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à: ${avg_win:.2f}")
        print(f"–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–∏–≥—Ä—ã—à: ${avg_loss:.2f}")
        print(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ Win/Loss: {abs(avg_win/avg_loss):.2f}" if avg_loss != 0 else "N/A")
        print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.initial_balance:.2f}")
        print(f"–ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.balance:.2f}")
        print(f"–û–±—â–∏–π PnL: ${total_pnl_usd:+.2f} ({total_pnl_percent:+.2f}%)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–∫—Ä—ã—Ç–∏—è
        result_counts = df['result'].value_counts()
        print(f"\nüìà –¢–∏–ø—ã –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫:")
        for result_type, count in result_counts.items():
            print(f"   {self.get_result_emoji(result_type)} {result_type}: {count}")
        
        if total_pnl_usd > 0:
            print("üéâ –ú–ò–ö–†–û-—Ç–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–∞!")
        else:
            print("üí∏ –ú–ò–ö–†–û-—Ç–æ—Ä–≥–æ–≤–ª—è —É–±—ã—Ç–æ—á–Ω–∞")
        
        print("\nüìà –î–µ—Ç–∞–ª–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º:")
        for i, trade in enumerate(self.trades, 1):
            result_display = self.get_result_display(trade['result'])
            print(f"{i:2d}. {trade['symbol']} {trade['signal']} | "
                  f"–†–∞–∑–º–µ—Ä: ${trade['trade_size']:.2f} | "
                  f"–í—Ö–æ–¥: {trade['entry_price']:.4f} | –í—ã—Ö–æ–¥: {trade['exit_price']:.4f} | "
                  f"PnL: {trade['pnl_usd']:+.2f}$ ({trade['pnl_percent']:+.2f}%) | {result_display}")
    
    def get_result_emoji(self, result_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        emoji_map = {
            'TP': '‚úÖ',
            'SL': '‚ùå', 
            'TIME': '‚è∞',
            'PNL_STOP': 'üö®',
            'EARLY_TP': 'üéØ'
        }
        return emoji_map.get(result_type, 'üìä')

# –ó–∞–ø—É—Å–∫ –ú–ò–ö–†–û-—Å–µ—Å—Å–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
if __name__ == "__main__":
    symbols = [
        'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'DOTUSDT',
        'LINKUSDT', 'LTCUSDT', 'BCHUSDT', 'XRPUSDT', 'EOSUSDT',
        'TRXUSDT', 'MATICUSDT', 'ATOMUSDT', 'FILUSDT', 'ETCUSDT'
    ]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –ª—é–±—ã–º –¥–µ–ø–æ–∑–∏—Ç–æ–º - –∫–æ–¥ —Å–∞–º –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è
    hunter = MicroLiquidityHunter(initial_balance=28.36)  # –ò–ª–∏ 50, –∏–ª–∏ 100, –∏–ª–∏ 1000
    hunter.scan_and_trade(symbols, max_cycles=5)
    hunter.generate_final_report()